#ifndef CPPLIB_TEST_HPP
#define CPPLIB_TEST_HPP

#include <fstream>
#include <vector>
#include <iostream>
#include <algorithm>
#include "term.hpp"

// Simple module for testing your code.
namespace test {

// Convenience macro which generates a generic name for an assertion.
#define CASE(expr) (#expr), (expr)

// Convenience macro which creates a "using" statement and test suite.
#define SETUP_SUITE(func) \
using func; \
test::Suite s(#func); \

// Controls whether results are printed to the standard output.
void use_stdout(bool);

// Registers a file to output results to.
// No file is generated by default.
void set_ofstream(std::ofstream *);

// Sets the indentation for printed assertions.
void set_indentation(char const *);

// If true, passing assertions will be printed - they are not printed by default.
// failing assertions are always printed.
void set_verbose_mode(bool);

// A class for grouping assertions.
// Don't forget to register your suites with `test::register_suite`!
class Suite {
public:
  std::string const m_name;

  Suite() = delete;
  // A copy of `name` is made, so you don't have to worry about lifetimes!
  Suite(char const *const name);
  // A copy of `name` is made, so you don't have to worry about lifetimes!
  Suite(std::string const &name);

  // Adds an assertions to this suite.
  // You can use the convenience macro `CASE` to generate a generic `name` automatically.
  // `expr` is your assertion which you want to be true,
  // for example: add(1, 2) == 3
  void assert(char const *const name, bool const expr);
  // This is called internally, you aren't required to do this!
  // But if you want, you can print the output of all currently stored assertions.
  void print_assertions() const;
  // Returns the number of currently stored assertions which are passing.
  // Used internally, you probably don't need to call this yourself.
  size_t passes() const;
  // Returns the number of currently stored assertions which are failing.
  // Used internally, you probably don't need to call this yourself.
  size_t fails() const;

private:
  class Assertion {
  public:
    std::string const m_name;
    bool const m_expr;

    Assertion();
    // A copy of `name` is made, so you don't have to worry about lifetimes!
    Assertion(char const *name, bool expr);
  };

  std::vector<Assertion> m_assertions{};
};

// Registers a suite for later evaluation.
// Takes an r-value reference, the passed suite will be cannibalized!
// This function is not threadsafe!
void register_suite(Suite &&);

// Evaluates all currently registered suites and prints their results.
// After evaluation, all suites are cleared.
// You can call this function once at the end of your "tester" program,
// or multiple times if you have assertions which can throw exceptions
// and thus crash the "tester" program.
// This function is not threadsafe!
void evaluate_suites();

} // namespace test

#endif // CPPLIB_TEST_HPP
